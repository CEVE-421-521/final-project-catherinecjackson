Previously, to generate storm surge, we have used the following function:

```{julia}
using Turing
using Statistics
using MCMCChains
using DynamicPPL
using AdvancedHMC
using DistributionsAD
using Bijectors
using Plots
using Distributions
using CairoMakie

function draw_surge_distribution()
    μ = rand(Normal(5, 1))
    σ = rand(Exponential(1.25))
    ξ = rand(Normal(0.1, 0.05))
    return GeneralizedExtremeValue(μ, σ, ξ)
end

draw_surge_distribution()
```

Bayesian statistics is an approach to inferential statistics based on Bayes' theorem, where available knowledge about parameters in a statistical model is updated with the information in observed data. The background knowledge is expressed as a prior distribution and combined with observational data in the form of a likelihood function to determine the posterior distribution. The posterior can also be used for making predictions about future events.

Bayesian statistics is a departure from classical inferential statistics that prohibits probability statements about parameters and is based on asymptotically sampling infinite samples from a theoretical population and finding parameter values that maximize the likelihood function. Mostly notorious is null-hypothesis significance testing (NHST) based on p-values. Bayesian statistics incorporate uncertainty (and prior knowledge) by allowing probability statements about parameters, and the process of parameter value inference is a direct result of the Bayes' theorem.

```{julia}
μ = rand(Normal(5, 1))
σ = rand(Exponential(1.25))
ξ = rand(Normal(0.1, 0.05))
```

```{julia}
@model function surge_model(y)
    μ ~ Normal(5, 1)
    σ ~ Exponential(1.25)
    ξ ~ Normal(0.1, 0.05)

    for i in eachindex(y)
        y[i] ~ GeneralizedExtremeValue(μ, σ, ξ)
    end
end;


## this should be the annual maximujm surge height.  go to the noaa website and pull the annuals.  remember that if you pull the 1hr maximum, it is averaged over that 1 hour.  try to get the smallest time interval -- 6 min?
dataex = [3.15, 3.02, 3.199, 4.07, 2.55]


model = surge_model(dataex)

# Sample from the posterior
chain = sample(model, Turing.NUTS(), 1000)

```

```{julia}
summaries, quantiles = describe(chain);
sum([idx * i for (i, idx) in enumerate(summaries[:, :mean])])
```

```{julia}
using AlgebraOfGraphics
using CairoMakie 

params = names(chain, :parameters)
chain_mapping = mapping(params .=> "sample value") *
                mapping(; color=:chain => nonnumeric, row=dims(1) => renamer(params))

plt1 = AlgebraOfGraphics.data(chain) * mapping(:iteration) * chain_mapping * visual(Lines)
plt2 = AlgebraOfGraphics.data(chain) * chain_mapping * AlgebraOfGraphics.density()  

f = Figure(; resolution=(800, 600))
draw!(f[1, 1], plt1)
draw!(f[1, 2], plt2; axis=(; ylabel="density"))

display(f)

```

```{julia}
#posterior uncertainty into the state of the world  

function draw_surge_dist_bayesian()
    randindex = rand(1:length(chain))
    μ = chain[:μ][randindex]
    σ = chain[:σ][randindex]
    ξ = chain[:ξ][randindex]
    return GeneralizedExtremeValue(μ, σ, ξ)
end
```

```{julia}
# plot a GEV distribution given the three paraameters
gev1 = draw_surge_distribution()
gevbayes = draw_surge_dist_bayesian()
# plot gev 1
x = range(0, 10, length=1000)
y = pdf(gev1, x)
plot1 = Plots.plot(x, y, label="Original GEV", lw=2, color=:red, legend=true, xlabel="Surge Height (m)", ylabel="Density")

for i = 1:10
    gevorigfor = draw_surge_distribution()
    y = pdf(gevorigfor, x)
    Plots.plot!(x, y, label="Original GEV", lw=2, color=:red, legend=false)
end

x = range(0, 10, length=1000)
y = pdf(gevbayes, x)
Plots.plot!(x, y, label="GEV Bayesian", lw=2)

for i = 1:10
    gevbayesfor = draw_surge_dist_bayesian()
    y = pdf(gevbayesfor, x)
    Plots.plot!(x, y, label="GEV Bayesian", lw=2, color=:blue)
end

display(plot1)
```